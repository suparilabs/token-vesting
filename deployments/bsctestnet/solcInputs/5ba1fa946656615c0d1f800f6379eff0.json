{
  "language": "Solidity",
  "sources": {
    "contracts/MockTokenPreVesting.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\nimport \"./TokenPreVesting.sol\";\r\n\r\n/**\r\n * @title MockTokenPreVesting\r\n * WARNING: use only for testing and debugging purpose\r\n */\r\ncontract MockTokenPreVesting is TokenPreVesting {\r\n    uint256 mockTime = 0;\r\n\r\n    constructor(address token_) TokenPreVesting(token_) {}\r\n\r\n    function setCurrentTime(uint256 _time) external {\r\n        mockTime = _time;\r\n    }\r\n\r\n    function getCurrentTime() public view virtual override returns (uint256) {\r\n        return mockTime;\r\n    }\r\n}\r\n"
    },
    "contracts/TokenPreVesting.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport { Address } from \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport { ReentrancyGuard } from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport { SafeMath } from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\n\r\n/**\r\n * @title Token vesting Contract\r\n */\r\ncontract TokenPreVesting is Ownable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    struct VestingSchedule {\r\n        bool initialized;\r\n        // beneficiary of tokens after they are released\r\n        address beneficiary;\r\n        // cliff period in seconds\r\n        uint256 cliff;\r\n        // duration of the vesting period in seconds\r\n        uint256 duration;\r\n        // duration of a slice period for the vesting in seconds\r\n        uint256 slicePeriodSeconds;\r\n        // whether or not the vesting is revocable\r\n        bool revocable;\r\n        // total amount of tokens to be released at the end of the vesting\r\n        uint256 amountTotal;\r\n        // amount of tokens released\r\n        uint256 released;\r\n        // whether or not the vesting has been revoked\r\n        bool revoked;\r\n        // tge tokens in percentage basis points\r\n        uint256 tge;\r\n    }\r\n\r\n    // Contract owner access\r\n    bool public allIncomingDepositsFinalised;\r\n\r\n    // Timestamp related variables\r\n    bool public timestampSet;\r\n    uint256 public initialTimestamp;\r\n    uint256 public start;\r\n\r\n    bytes32[] private vestingSchedulesIds;\r\n    uint256 private vestingSchedulesTotalAmount;\r\n    mapping(bytes32 => VestingSchedule) private vestingSchedules;\r\n    mapping(address => uint256) private holdersVestingCount;\r\n\r\n    IERC20 private immutable _token;\r\n\r\n    event Released(uint256 amount);\r\n    event Revoked();\r\n    event VestingScheduleCreated(address beneficiary, bytes32 vestingScheduleId);\r\n\r\n    /**\r\n     * @dev Throws if allIncomingDepositsFinalised is true.\r\n     */\r\n    modifier incomingDepositsStillAllowed() {\r\n        require(allIncomingDepositsFinalised == false, \"TokenPreVesting: Incoming deposits have been finalised.\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if no vesting schedule matches the passed identifier.\r\n     */\r\n    modifier onlyIfVestingScheduleExists(bytes32 vestingScheduleId) {\r\n        require(\r\n            vestingSchedules[vestingScheduleId].initialized == true,\r\n            \"TokenPreVesting: vesting schedule does not exist for this user\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyIfLaunchTimestampNotSet() {\r\n        require(timestampSet == false, \"TokenPreVesting: launch timestamp is set\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if the vesting schedule does not exist or has been revoked.\r\n     */\r\n    modifier onlyIfVestingScheduleNotRevoked(bytes32 vestingScheduleId) {\r\n        require(\r\n            vestingSchedules[vestingScheduleId].initialized == true,\r\n            \"TokenPreVesting: Vesting schedule does not exists\"\r\n        );\r\n        require(vestingSchedules[vestingScheduleId].revoked == false, \"TokenPreVesting: Vesting schedule is revoked\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Creates a vesting contract.\r\n     * @param token_ address of the ERC20 token contract\r\n     */\r\n    constructor(address token_) {\r\n        require(token_ != address(0x0), \"TokenPreVesting: token address is zero\");\r\n        initialTimestamp = block.timestamp;\r\n        _token = IERC20(token_);\r\n    }\r\n\r\n    /**\r\n     * @dev set timestamp and finalize deposits\r\n     * @param _timePeriodInSeconds time period in seconds\r\n     */\r\n    function setTimestamp(uint256 _timePeriodInSeconds) external onlyOwner onlyIfLaunchTimestampNotSet {\r\n        timestampSet = true;\r\n        allIncomingDepositsFinalised = true;\r\n        initialTimestamp = block.timestamp;\r\n        start = initialTimestamp.add(_timePeriodInSeconds);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of vesting schedules associated to a beneficiary.\r\n     * @return the number of vesting schedules\r\n     */\r\n    function getVestingSchedulesCountByBeneficiary(address _beneficiary) external view returns (uint256) {\r\n        return holdersVestingCount[_beneficiary];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the vesting schedule id at the given index.\r\n     * @return the vesting id\r\n     */\r\n    function getVestingIdAtIndex(uint256 index) external view returns (bytes32) {\r\n        require(index < getVestingSchedulesCount(), \"TokenPreVesting: index out of bounds\");\r\n        return vestingSchedulesIds[index];\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the vesting schedule information for a given holder and index.\r\n     * @return the vesting schedule structure information\r\n     */\r\n    function getVestingScheduleByAddressAndIndex(address holder, uint256 index)\r\n        external\r\n        view\r\n        returns (VestingSchedule memory)\r\n    {\r\n        return getVestingSchedule(computeVestingScheduleIdForAddressAndIndex(holder, index));\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the total amount of vesting schedules.\r\n     * @return the total amount of vesting schedules\r\n     */\r\n    function getVestingSchedulesTotalAmount() external view returns (uint256) {\r\n        return vestingSchedulesTotalAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the ERC20 token managed by the vesting contract.\r\n     */\r\n    function getToken() external view returns (address) {\r\n        return address(_token);\r\n    }\r\n\r\n    /**\r\n     * @notice Creates a new vesting schedule for a beneficiary.\r\n     * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\r\n     * @param _cliff duration in seconds of the cliff in which tokens will begin to vest\r\n     * @param _duration duration in seconds of the period in which the tokens will vest\r\n     * @param _slicePeriodSeconds duration of a slice period for the vesting in seconds\r\n     * @param _revocable whether the vesting is revocable or not\r\n     * @param _amount total amount of tokens to be released at the end of the vesting\r\n     * @param _tge tge tokens in percentage basis points\r\n     */\r\n    function createVestingSchedule(\r\n        address _beneficiary,\r\n        uint256 _cliff,\r\n        uint256 _duration,\r\n        uint256 _slicePeriodSeconds,\r\n        bool _revocable,\r\n        uint256 _amount,\r\n        uint256 _tge\r\n    ) public incomingDepositsStillAllowed onlyOwner {\r\n        require(\r\n            this.getWithdrawableAmount() >= _amount,\r\n            \"TokenPreVesting: cannot create vesting schedule because not sufficient tokens\"\r\n        );\r\n        require(_duration > 0, \"TokenPreVesting: duration must be > 0\");\r\n        require(_amount > 0, \"TokenPreVesting: amount must be > 0\");\r\n        require(_slicePeriodSeconds >= 1, \"TokenPreVesting: slicePeriodSeconds must be >= 1\");\r\n        bytes32 vestingScheduleId = this.computeNextVestingScheduleIdForHolder(_beneficiary);\r\n        vestingSchedules[vestingScheduleId] = VestingSchedule(\r\n            true,\r\n            _beneficiary,\r\n            _cliff,\r\n            _duration,\r\n            _slicePeriodSeconds,\r\n            _revocable,\r\n            _amount,\r\n            0,\r\n            false,\r\n            _tge\r\n        );\r\n        vestingSchedulesTotalAmount = vestingSchedulesTotalAmount.add(_amount);\r\n        vestingSchedulesIds.push(vestingScheduleId);\r\n        uint256 currentVestingCount = holdersVestingCount[_beneficiary];\r\n        holdersVestingCount[_beneficiary] = currentVestingCount.add(1);\r\n        emit VestingScheduleCreated(_beneficiary, vestingScheduleId);\r\n    }\r\n\r\n    /**\r\n     * BULK : CREATING VESTING SCHEDULE IN BULK\r\n     * @notice Creates a new vesting schedule for a beneficiary.\r\n     * @param _beneficiaries address of the beneficiary to whom vested tokens are transferred\r\n     * @param _cliffs duration in seconds of the cliff in which tokens will begin to vest\r\n     * @param _durations duration in seconds of the period in which the tokens will vest\r\n     * @param _slicePeriodSeconds duration of a slice period for the vesting in seconds\r\n     * @param _revocables whether the vesting is revocable or not\r\n     * @param _amounts total amount of tokens to be released at the end of the vesting\r\n     * @param _tges list of tges in percentage basis points\r\n     */\r\n    function createVestingSchedule(\r\n        address[] calldata _beneficiaries,\r\n        uint256[] calldata _cliffs,\r\n        uint256[] calldata _durations,\r\n        uint256[] calldata _slicePeriodSeconds,\r\n        bool[] calldata _revocables,\r\n        uint256[] memory _amounts,\r\n        uint256[] memory _tges\r\n    ) external incomingDepositsStillAllowed onlyOwner {\r\n        require(\r\n            _beneficiaries.length == _durations.length &&\r\n                _durations.length == _slicePeriodSeconds.length &&\r\n                _slicePeriodSeconds.length == _revocables.length &&\r\n                _revocables.length == _amounts.length,\r\n            \"TokenPreVesting: Length mismatch\"\r\n        );\r\n\r\n        //looping through beneficiaries\r\n        for (uint256 _i; _i < _beneficiaries.length; _i++) {\r\n            createVestingSchedule(\r\n                _beneficiaries[_i],\r\n                _cliffs[_i],\r\n                _durations[_i],\r\n                _slicePeriodSeconds[_i],\r\n                _revocables[_i],\r\n                _amounts[_i],\r\n                _tges[_i]\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Revokes the vesting schedule for given identifier.\r\n     * @param vestingScheduleId the vesting schedule identifier\r\n     */\r\n    function revoke(bytes32 vestingScheduleId) public onlyOwner onlyIfVestingScheduleNotRevoked(vestingScheduleId) {\r\n        VestingSchedule storage vestingSchedule = vestingSchedules[vestingScheduleId];\r\n        require(vestingSchedule.revocable == true, \"TokenPreVesting: vesting is not revocable\");\r\n        uint256 vestedAmount = _computeReleasableAmount(vestingSchedule);\r\n        if (vestedAmount > 0) {\r\n            release(vestingScheduleId, vestedAmount);\r\n        }\r\n        uint256 unreleased = vestingSchedule.amountTotal.sub(vestingSchedule.released);\r\n        vestingSchedulesTotalAmount = vestingSchedulesTotalAmount.sub(unreleased);\r\n        vestingSchedule.revoked = true;\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraw the specified amount if possible.\r\n     * @param amount the amount to withdraw\r\n     */\r\n    function withdraw(uint256 amount) public nonReentrant onlyOwner {\r\n        require(this.getWithdrawableAmount() >= amount, \"TokenPreVesting: not enough withdrawable funds\");\r\n        _token.safeTransfer(owner(), amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Release vested amount of tokens.\r\n     * @param vestingScheduleId the vesting schedule identifier\r\n     * @param amount the amount to release\r\n     */\r\n    function release(bytes32 vestingScheduleId, uint256 amount)\r\n        public\r\n        nonReentrant\r\n        onlyIfVestingScheduleNotRevoked(vestingScheduleId)\r\n    {\r\n        VestingSchedule storage vestingSchedule = vestingSchedules[vestingScheduleId];\r\n        bool isBeneficiary = msg.sender == vestingSchedule.beneficiary;\r\n        bool isOwner = msg.sender == owner();\r\n        require(isBeneficiary || isOwner, \"TokenPreVesting: only beneficiary and owner can release vested tokens\");\r\n        uint256 vestedAmount = _computeReleasableAmount(vestingSchedule);\r\n        require(vestedAmount >= amount, \"TokenPreVesting: cannot release tokens, not enough vested tokens\");\r\n        vestingSchedule.released = vestingSchedule.released.add(amount);\r\n        address payable beneficiaryPayable = payable(vestingSchedule.beneficiary);\r\n        vestingSchedulesTotalAmount = vestingSchedulesTotalAmount.sub(amount);\r\n        _token.safeTransfer(beneficiaryPayable, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of vesting schedules managed by this contract.\r\n     * @return the number of vesting schedules\r\n     */\r\n    function getVestingSchedulesCount() public view returns (uint256) {\r\n        return vestingSchedulesIds.length;\r\n    }\r\n\r\n    /**\r\n     * @notice Computes the vested amount of tokens for the given vesting schedule identifier.\r\n     * @return the vested amount\r\n     */\r\n    function computeReleasableAmount(bytes32 vestingScheduleId)\r\n        public\r\n        view\r\n        onlyIfVestingScheduleNotRevoked(vestingScheduleId)\r\n        returns (uint256)\r\n    {\r\n        VestingSchedule storage vestingSchedule = vestingSchedules[vestingScheduleId];\r\n        return _computeReleasableAmount(vestingSchedule);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the vesting schedule information for a given identifier.\r\n     * @return the vesting schedule structure information\r\n     */\r\n    function getVestingSchedule(bytes32 vestingScheduleId) public view returns (VestingSchedule memory) {\r\n        return vestingSchedules[vestingScheduleId];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens that can be withdrawn by the owner.\r\n     * @return the amount of tokens\r\n     */\r\n    function getWithdrawableAmount() public view returns (uint256) {\r\n        return _token.balanceOf(address(this)).sub(vestingSchedulesTotalAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Computes the next vesting schedule identifier for a given holder address.\r\n     */\r\n    function computeNextVestingScheduleIdForHolder(address holder) public view returns (bytes32) {\r\n        return computeVestingScheduleIdForAddressAndIndex(holder, holdersVestingCount[holder]);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the last vesting schedule for a given holder address.\r\n     */\r\n    function getLastVestingScheduleForHolder(address holder) public view returns (VestingSchedule memory) {\r\n        return vestingSchedules[computeVestingScheduleIdForAddressAndIndex(holder, holdersVestingCount[holder] - 1)];\r\n    }\r\n\r\n    /**\r\n     * @dev Computes the vesting schedule identifier for an address and an index.\r\n     */\r\n    function computeVestingScheduleIdForAddressAndIndex(address holder, uint256 index) public pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(holder, index));\r\n    }\r\n\r\n    /**\r\n     * @dev Computes the releasable amount of tokens for a vesting schedule.\r\n     * @return the amount of releasable tokens\r\n     */\r\n    function _computeReleasableAmount(VestingSchedule memory vestingSchedule) internal view returns (uint256) {\r\n        if (!timestampSet) {\r\n            return uint256(0);\r\n        }\r\n        uint256 currentTime = getCurrentTime();\r\n        if ((currentTime < start.add(vestingSchedule.cliff)) || vestingSchedule.revoked == true) {\r\n            return 0;\r\n        } else if (currentTime >= start.add(vestingSchedule.duration)) {\r\n            return vestingSchedule.amountTotal.sub(vestingSchedule.released);\r\n        } else {\r\n            uint256 timeFromStart = currentTime.sub(start);\r\n            uint256 secondsPerSlice = vestingSchedule.slicePeriodSeconds;\r\n            uint256 vestedSlicePeriods = timeFromStart.div(secondsPerSlice);\r\n            uint256 vestedSeconds = vestedSlicePeriods.mul(secondsPerSlice);\r\n            uint256 vestedAmount = vestingSchedule.amountTotal.mul(vestedSeconds).div(vestingSchedule.duration);\r\n            vestedAmount = vestedAmount.sub(vestingSchedule.released);\r\n            return vestedAmount;\r\n        }\r\n    }\r\n\r\n    function getCurrentTime() public view virtual returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/TokenPreSale.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport { ReentrancyGuard } from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport { SafeMath } from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport { ERC20 } from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport { TokenPreTimelock } from \"./TokenPreTimelock.sol\";\r\nimport { TokenPreVesting } from \"./TokenPreVesting.sol\";\r\n\r\n/**\r\n * @title TokenPreSale Contract\r\n */\r\n\r\ncontract TokenPreSale is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    IERC20 public token; // the token being sold\r\n\r\n    uint256 public coinsSold;\r\n\r\n    event Sold(address buyer, uint256 amount);\r\n\r\n    uint256 public exchangePriceUSDT = 120000000000000000;\r\n    uint256 public exchangePriceBUSD = 120000000000000000;\r\n    uint256 public duration = 18 * 30 days;\r\n    uint256 public cliff = 3 * 30 days;\r\n    uint256 public minBuyAmountUSDT = 1000000000000000000;\r\n    uint256 public maxBuyAmountUSDT = 10000000000000000000000;\r\n    uint256 public minBuyAmountBUSD = 1000000000000000000;\r\n    uint256 public maxBuyAmountBUSD = 10000000000000000000000;\r\n    TokenPreVesting public vesting;\r\n    TokenPreTimelock public timelock;\r\n\r\n    uint256 public availableAtTGE = 200; // percentage basis points\r\n\r\n    enum SaleStatus {\r\n        Pause,\r\n        Start\r\n    }\r\n\r\n    SaleStatus public saleStatus;\r\n    address public immutable USDT;\r\n    address public immutable BUSD;\r\n\r\n    constructor(\r\n        IERC20 _token,\r\n        address _usdt,\r\n        address _busd\r\n    ) {\r\n        token = _token;\r\n        USDT = _usdt;\r\n        BUSD = _busd;\r\n        vesting = new TokenPreVesting(address(token));\r\n        timelock = new TokenPreTimelock(address(token));\r\n    }\r\n\r\n    modifier onSale() {\r\n        require(saleStatus == SaleStatus.Start, \"TokenPreSale: Sale not started\");\r\n        _;\r\n    }\r\n\r\n    function setExchangePriceUSDT(uint256 _usdtPrice) external onlyOwner {\r\n        exchangePriceUSDT = _usdtPrice;\r\n    }\r\n\r\n    function setExchangePriceBUSD(uint256 _busdPrice) external onlyOwner {\r\n        exchangePriceBUSD = _busdPrice;\r\n    }\r\n\r\n    function setDuration(uint256 _duration) external onlyOwner {\r\n        duration = _duration;\r\n    }\r\n\r\n    function setCliff(uint256 _cliff) external onlyOwner {\r\n        cliff = _cliff;\r\n    }\r\n\r\n    function setTimeStamp(uint256 _timePeriodInSeconds) external onlyOwner {\r\n        vesting.setTimestamp(_timePeriodInSeconds);\r\n        timelock.setTimestamp(_timePeriodInSeconds);\r\n    }\r\n\r\n    function setSaleStatus(SaleStatus _saleStatus) external onlyOwner {\r\n        saleStatus = _saleStatus;\r\n    }\r\n\r\n    function setAvailableAtTGE(uint256 _availableAtTGE) external onlyOwner {\r\n        availableAtTGE = _availableAtTGE;\r\n    }\r\n\r\n    function transferAccidentallyLockedTokensInTimeLock(IERC20 _token, uint256 _amount) external onlyOwner {\r\n        timelock.transferAccidentallyLockedTokens(_token, _amount);\r\n        _token.transfer(owner(), _amount);\r\n    }\r\n\r\n    function setBuyAmountRangeBUSD(uint256 _min, uint256 _max) external onlyOwner {\r\n        minBuyAmountBUSD = _min;\r\n        maxBuyAmountBUSD = _max;\r\n    }\r\n\r\n    function setBuyAmountRangeUSDT(uint256 _min, uint256 _max) external onlyOwner {\r\n        minBuyAmountUSDT = _min;\r\n        maxBuyAmountUSDT = _max;\r\n    }\r\n\r\n    function buyTokensUsingBUSD(uint256 _busdAmount) external onSale {\r\n        uint256 _balanceBefore = IERC20(BUSD).balanceOf(address(this));\r\n        require(IERC20(BUSD).transferFrom(msg.sender, address(this), _busdAmount), \"TokenPreSale: BUSD -> this\");\r\n        uint256 _balanceAfter = IERC20(BUSD).balanceOf(address(this));\r\n        uint256 _actualBUSDAmount = _balanceAfter.sub(_balanceBefore);\r\n        require(\r\n            _actualBUSDAmount >= minBuyAmountBUSD && _actualBUSDAmount <= maxBuyAmountBUSD,\r\n            \"TokenPreSale: BUSD out of range\"\r\n        );\r\n        uint256 _numberOfTokens = computeTokensForBUSD(_actualBUSDAmount);\r\n        require(\r\n            token.allowance(owner(), address(this)) >= _numberOfTokens,\r\n            \"TokenPreSale: insufficient token approval\"\r\n        );\r\n        emit Sold(msg.sender, _numberOfTokens);\r\n        coinsSold += _numberOfTokens;\r\n        uint256 _nonVestedTokenAmount = _numberOfTokens.mul(availableAtTGE).div(10000);\r\n        uint256 _vestedTokenAmount = _numberOfTokens.sub(_nonVestedTokenAmount);\r\n        // send some pct of tokens to buyer right away\r\n        if (_nonVestedTokenAmount > 0) {\r\n            require(\r\n                token.transferFrom(owner(), address(timelock), _nonVestedTokenAmount),\r\n                \"TokenPreSale: token -> tokenpretimelock\"\r\n            );\r\n            timelock.depositTokens(msg.sender, _nonVestedTokenAmount);\r\n        } // vest rest of the tokens\r\n        require(\r\n            token.transferFrom(owner(), address(vesting), _vestedTokenAmount),\r\n            \"TokenPreSale: token -> tokenprevesting\"\r\n        );\r\n        vesting.createVestingSchedule(msg.sender, cliff, duration, 1, false, _vestedTokenAmount, availableAtTGE);\r\n    }\r\n\r\n    function buyTokensUsingUSDT(uint256 _usdtAmount) external onSale {\r\n        uint256 _balanceBefore = IERC20(USDT).balanceOf(address(this));\r\n        require(IERC20(USDT).transferFrom(msg.sender, address(this), _usdtAmount), \"TokenPreSale: USDT -> this\");\r\n        uint256 _balanceAfter = IERC20(USDT).balanceOf(address(this));\r\n        uint256 _actualUSDTAmount = _balanceAfter.sub(_balanceBefore);\r\n        require(\r\n            _actualUSDTAmount >= minBuyAmountUSDT && _actualUSDTAmount <= maxBuyAmountUSDT,\r\n            \"TokenPreSale: USDT out of range\"\r\n        );\r\n        uint256 _numberOfTokens = computeTokensForUSDT(_actualUSDTAmount);\r\n        require(\r\n            token.allowance(owner(), address(this)) >= _numberOfTokens,\r\n            \"TokenPreSale: insufficient token approval\"\r\n        );\r\n        emit Sold(msg.sender, _numberOfTokens);\r\n        coinsSold += _numberOfTokens;\r\n        uint256 _nonVestedTokenAmount = _numberOfTokens.mul(availableAtTGE).div(10000);\r\n        uint256 _vestedTokenAmount = _numberOfTokens.sub(_nonVestedTokenAmount);\r\n        // send some pct of tokens to buyer right away\r\n        if (_nonVestedTokenAmount > 0) {\r\n            require(\r\n                token.transferFrom(owner(), address(timelock), _nonVestedTokenAmount),\r\n                \"TokenPreSale: token -> tokenpretimelock\"\r\n            );\r\n            timelock.depositTokens(msg.sender, _nonVestedTokenAmount);\r\n        } // vest rest of the tokens\r\n        require(\r\n            token.transferFrom(owner(), address(vesting), _vestedTokenAmount),\r\n            \"TokenPreSale: token -> tokenprevesting\"\r\n        );\r\n\r\n        vesting.createVestingSchedule(msg.sender, cliff, duration, 1, false, _vestedTokenAmount, availableAtTGE);\r\n    }\r\n\r\n    function computeTokensForBUSD(uint256 _busdAmount) public view returns (uint256) {\r\n        uint256 _tokenDecimals = ERC20(address(token)).decimals();\r\n        return (_busdAmount * 10**_tokenDecimals) / exchangePriceBUSD;\r\n    }\r\n\r\n    function computeTokensForUSDT(uint256 _usdtAmount) public view returns (uint256) {\r\n        uint256 _tokenDecimals = ERC20(address(token)).decimals();\r\n        return (_usdtAmount * 10**_tokenDecimals) / exchangePriceUSDT;\r\n    }\r\n\r\n    function withdrawBUSD() public onlyOwner {\r\n        uint256 _busdBalance = IERC20(BUSD).balanceOf(address(this));\r\n        if (_busdBalance > 0) {\r\n            IERC20(BUSD).transfer(owner(), _busdBalance);\r\n        }\r\n    }\r\n\r\n    function withdrawUSDT() public onlyOwner {\r\n        uint256 _usdtBalance = IERC20(USDT).balanceOf(address(this));\r\n        if (_usdtBalance > 0) {\r\n            IERC20(USDT).transfer(owner(), _usdtBalance);\r\n        }\r\n    }\r\n\r\n    function withdrawFromVesting(uint256 _amount) public onlyOwner {\r\n        vesting.withdraw(_amount);\r\n        token.transfer(owner(), _amount);\r\n    }\r\n\r\n    function transferAccidentallyLockedTokensFromTimelock(IERC20 _token, uint256 amount) public onlyOwner {\r\n        timelock.transferAccidentallyLockedTokens(_token, amount);\r\n        _token.transfer(owner(), _token.balanceOf(address(this)));\r\n    }\r\n\r\n    function revoke(bytes32 vestingScheduleId) external onlyOwner {\r\n        vesting.revoke(vestingScheduleId);\r\n    }\r\n\r\n    function endSale() external onlyOwner {\r\n        // Send unsold tokens to owner.\r\n        saleStatus = SaleStatus.Pause;\r\n        uint256 _withdrawableAmount = vesting.getWithdrawableAmount();\r\n        if (_withdrawableAmount > 0) {\r\n            withdrawFromVesting(vesting.getWithdrawableAmount());\r\n        }\r\n        withdrawBUSD();\r\n        withdrawUSDT();\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "contracts/TokenPreTimelock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport { SafeMath } from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\n/**\r\n * @title TokenPreTimeLock Contract\r\n */\r\n\r\ncontract TokenPreTimelock is Ownable {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    // boolean to prevent reentrancy\r\n    bool internal locked;\r\n\r\n    // Contract owner access\r\n    bool public allIncomingDepositsFinalised;\r\n\r\n    // Timestamp related variables\r\n    bool public timestampSet;\r\n    uint256 public initialTimestamp;\r\n    uint256 public timePeriod;\r\n\r\n    // Token amount variables\r\n    mapping(address => uint256) public alreadyWithdrawn;\r\n    mapping(address => uint256) public balances;\r\n\r\n    // address of the token\r\n    IERC20 private immutable _token;\r\n\r\n    // Events\r\n    event TokensDeposited(address from, uint256 amount);\r\n    event AllocationPerformed(address recipient, uint256 amount);\r\n    event TokensUnlocked(address recipient, uint256 amount);\r\n\r\n    constructor(address token_) {\r\n        require(token_ != address(0x0), \"TokenPreTimelock: _erc20_contract_address address can not be zero\");\r\n        _token = IERC20(token_);\r\n        allIncomingDepositsFinalised = false;\r\n        timestampSet = false;\r\n        locked = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents reentrancy\r\n     */\r\n    modifier noReentrant() {\r\n        require(!locked, \"TokenPreTimelock: No re-entrancy\");\r\n        locked = true;\r\n        _;\r\n        locked = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if allIncomingDepositsFinalised is true.\r\n     */\r\n    modifier incomingDepositsStillAllowed() {\r\n        require(allIncomingDepositsFinalised == false, \"TokenPreTimelock: Incoming deposits have been finalised.\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if timestamp already set.\r\n     */\r\n    modifier timestampNotSet() {\r\n        require(timestampSet == false, \"TokenPreTimelock: The time stamp has already been set.\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if timestamp not set.\r\n     */\r\n    modifier timestampIsSet() {\r\n        require(timestampSet == true, \"TokenPreTimelock: Please set the time stamp first, then try again.\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the ERC20 token managed by the vesting contract.\r\n     */\r\n    function getToken() external view returns (address) {\r\n        return address(_token);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the initial timestamp and calculates locking period variables i.e. twelveMonths etc.\r\n     *      setting the time stamp will also finalize deposits\r\n     * @param _timePeriodInSeconds amount of seconds to add to the initial timestamp i.e. we are essemtially creating the lockup period here\r\n     */\r\n    function setTimestamp(uint256 _timePeriodInSeconds) public onlyOwner timestampNotSet {\r\n        timestampSet = true;\r\n        allIncomingDepositsFinalised = true;\r\n        initialTimestamp = block.timestamp;\r\n        timePeriod = initialTimestamp.add(_timePeriodInSeconds);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the contract owner to allocate official ERC20 tokens to each future recipient (only one at a time).\r\n     * @param recipient, address of recipient.\r\n     * @param amount to allocate to recipient.\r\n     */\r\n    function depositTokens(address recipient, uint256 amount) public onlyOwner incomingDepositsStillAllowed {\r\n        require(recipient != address(0), \"TokenPreTimelock: ERC20: transfer to the zero address\");\r\n        balances[recipient] = balances[recipient].add(amount);\r\n        emit AllocationPerformed(recipient, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the contract owner to allocate official ERC20 tokens to multiple future recipient in bulk.\r\n     * @param recipients, an array of addresses of the many recipient.\r\n     * @param amounts to allocate to each of the many recipient.\r\n     */\r\n    function bulkDepositTokens(address[] calldata recipients, uint256[] calldata amounts)\r\n        external\r\n        onlyOwner\r\n        incomingDepositsStillAllowed\r\n    {\r\n        require(\r\n            recipients.length == amounts.length,\r\n            \"TokenPreTimelock: The recipients and amounts arrays must be the same size in length\"\r\n        );\r\n        for (uint256 i = 0; i < recipients.length; i++) {\r\n            require(recipients[i] != address(0), \"TokenPreTimelock: ERC20: transfer to the zero address\");\r\n            balances[recipients[i]] = balances[recipients[i]].add(amounts[i]);\r\n            emit AllocationPerformed(recipients[i], amounts[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Allows recipient to unlock tokens after 24 month period has elapsed\r\n     * @param token - address of the official ERC20 token which is being unlocked here.\r\n     * @param to - the recipient's account address.\r\n     * @param amount - the amount to unlock (in wei)\r\n     */\r\n    function transferTimeLockedTokensAfterTimePeriod(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 amount\r\n    ) public timestampIsSet noReentrant {\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(balances[to] >= amount, \"Insufficient token balance, try lesser amount\");\r\n        require(msg.sender == to, \"Only the token recipient can perform the unlock\");\r\n        require(\r\n            token == _token,\r\n            \"TokenPreTimelock: Token parameter must be the same as the erc20 contract address which was passed into the constructor\"\r\n        );\r\n        if (block.timestamp >= timePeriod) {\r\n            alreadyWithdrawn[to] = alreadyWithdrawn[to].add(amount);\r\n            balances[to] = balances[to].sub(amount);\r\n            token.safeTransfer(to, amount);\r\n            emit TokensUnlocked(to, amount);\r\n        } else {\r\n            revert(\"TokenPreTimelock: Tokens are only available after correct time period has elapsed\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer accidentally locked ERC20 tokens.\r\n     * @param token - ERC20 token address.\r\n     * @param amount of ERC20 tokens to remove.\r\n     */\r\n    function transferAccidentallyLockedTokens(IERC20 token, uint256 amount) public onlyOwner noReentrant {\r\n        require(address(token) != address(0), \"TokenPreTimelock: Token address can not be zero\");\r\n        // This function can not access the official timelocked tokens; just other random ERC20 tokens that may have been accidently sent here\r\n        require(\r\n            token != _token,\r\n            \"TokenPreTimelock: Token address can not be ERC20 address which was passed into the constructor\"\r\n        );\r\n        // Transfer the amount of the specified ERC20 tokens, to the owner of this contract\r\n        token.safeTransfer(msg.sender, amount);\r\n    }\r\n\r\n    function getCurrentTime() public view virtual returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/TokenTimelock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport { SafeMath } from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\n/**\r\n * @title TokenTimeLock Contract\r\n */\r\n\r\ncontract TokenTimelock is Ownable {\r\n    // boolean to prevent reentrancy\r\n    bool internal locked;\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n    // address of the MEI token\r\n    IERC20 private immutable _token;\r\n\r\n    // Contract owner access\r\n    bool public allIncomingDepositsFinalised;\r\n\r\n    // Timestamp related variables\r\n    uint256 public initialTimestamp;\r\n    bool public timestampSet;\r\n    uint256 public timePeriod;\r\n\r\n    // Token amount variables\r\n    mapping(address => uint256) public alreadyWithdrawn;\r\n    mapping(address => uint256) public balances;\r\n    uint256 public contractBalance;\r\n\r\n    // Events\r\n    event TokensDeposited(address from, uint256 amount);\r\n    event AllocationPerformed(address recipient, uint256 amount);\r\n    event TokensUnlocked(address recipient, uint256 amount);\r\n\r\n    constructor(address token_) {\r\n        require(token_ != address(0x0), \"_erc20_contract_address address can not be zero\");\r\n        _token = IERC20(token_);\r\n        allIncomingDepositsFinalised = false;\r\n        timestampSet = false;\r\n        locked = false;\r\n    }\r\n\r\n    // Modifier\r\n    /**\r\n     * @dev Prevents reentrancy\r\n     */\r\n    modifier noReentrant() {\r\n        require(!locked, \"No re-entrancy\");\r\n        locked = true;\r\n        _;\r\n        locked = false;\r\n    }\r\n\r\n    // Modifier\r\n    /**\r\n     * @dev Throws if allIncomingDepositsFinalised is true.\r\n     */\r\n    modifier incomingDepositsStillAllowed() {\r\n        require(allIncomingDepositsFinalised == false, \"Incoming deposits have been finalised.\");\r\n        _;\r\n    }\r\n\r\n    // Modifier\r\n    /**\r\n     * @dev Throws if timestamp already set.\r\n     */\r\n    modifier timestampNotSet() {\r\n        require(timestampSet == false, \"The time stamp has already been set.\");\r\n        _;\r\n    }\r\n\r\n    // Modifier\r\n    /**\r\n     * @dev Throws if timestamp not set.\r\n     */\r\n    modifier timestampIsSet() {\r\n        require(timestampSet == true, \"Please set the time stamp first, then try again.\");\r\n        _;\r\n    }\r\n\r\n    receive() external payable incomingDepositsStillAllowed {\r\n        contractBalance = contractBalance.add(msg.value);\r\n        emit TokensDeposited(msg.sender, msg.value);\r\n    }\r\n\r\n    // @dev Takes away any ability (for the contract owner) to assign any tokens to any recipients. This function is only to be called by the contract owner. Calling this function can not be undone. Calling this function must only be performed when all of the addresses and amounts are allocated (to the recipients). This function finalizes the contract owners involvement and at this point the contract's timelock functionality is non-custodial\r\n    function finalizeAllIncomingDeposits() public timestampIsSet incomingDepositsStillAllowed {\r\n        allIncomingDepositsFinalised = true;\r\n    }\r\n\r\n    /// @dev Sets the initial timestamp and calculates locking period variables i.e. twelveMonths etc.\r\n    /// @param _timePeriodInSeconds amount of seconds to add to the initial timestamp i.e. we are essemtially creating the lockup period here\r\n    function setTimestamp(uint256 _timePeriodInSeconds) public onlyOwner timestampNotSet {\r\n        timestampSet = true;\r\n        initialTimestamp = block.timestamp;\r\n        timePeriod = initialTimestamp.add(_timePeriodInSeconds);\r\n    }\r\n\r\n    /// @dev Function to withdraw Eth in case Eth is accidently sent to this contract.\r\n    /// @param amount of network tokens to withdraw (in wei).\r\n    function withdrawEth(uint256 amount) public onlyOwner noReentrant {\r\n        require(amount <= contractBalance, \"Insufficient funds\");\r\n        contractBalance = contractBalance.sub(amount);\r\n        // Transfer the specified amount of Eth to the owner of this contract\r\n        payable(msg.sender).transfer(amount);\r\n    }\r\n\r\n    /// @dev Allows the contract owner to allocate official ERC20 tokens to each future recipient (only one at a time).\r\n    /// @param recipient, address of recipient.\r\n    /// @param amount to allocate to recipient.\r\n    function depositTokens(address recipient, uint256 amount)\r\n        public\r\n        onlyOwner\r\n        timestampIsSet\r\n        incomingDepositsStillAllowed\r\n    {\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        balances[recipient] = balances[recipient].add(amount);\r\n        emit AllocationPerformed(recipient, amount);\r\n    }\r\n\r\n    /// @dev Allows the contract owner to allocate official ERC20 tokens to multiple future recipient in bulk.\r\n    /// @param recipients, an array of addresses of the many recipient.\r\n    /// @param amounts to allocate to each of the many recipient.\r\n    function bulkDepositTokens(address[] calldata recipients, uint256[] calldata amounts)\r\n        external\r\n        onlyOwner\r\n        timestampIsSet\r\n        incomingDepositsStillAllowed\r\n    {\r\n        require(\r\n            recipients.length == amounts.length,\r\n            \"The recipients and amounts arrays must be the same size in length\"\r\n        );\r\n        for (uint256 i = 0; i < recipients.length; i++) {\r\n            require(recipients[i] != address(0), \"ERC20: transfer to the zero address\");\r\n            balances[recipients[i]] = balances[recipients[i]].add(amounts[i]);\r\n            emit AllocationPerformed(recipients[i], amounts[i]);\r\n        }\r\n    }\r\n\r\n    /// @dev Allows recipient to unlock tokens after 24 month period has elapsed\r\n    /// @param token - address of the official ERC20 token which is being unlocked here.\r\n    /// @param to - the recipient's account address.\r\n    /// @param amount - the amount to unlock (in wei)\r\n    function transferTimeLockedTokensAfterTimePeriod(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 amount\r\n    ) public timestampIsSet noReentrant {\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(balances[to] >= amount, \"Insufficient token balance, try lesser amount\");\r\n        require(msg.sender == to, \"Only the token recipient can perform the unlock\");\r\n        require(\r\n            token == _token,\r\n            \"Token parameter must be the same as the erc20 contract address which was passed into the constructor\"\r\n        );\r\n        if (block.timestamp >= timePeriod) {\r\n            alreadyWithdrawn[to] = alreadyWithdrawn[to].add(amount);\r\n            balances[to] = balances[to].sub(amount);\r\n            token.safeTransfer(to, amount);\r\n            emit TokensUnlocked(to, amount);\r\n        } else {\r\n            revert(\"Tokens are only available after correct time period has elapsed\");\r\n        }\r\n    }\r\n\r\n    /// @dev Transfer accidentally locked ERC20 tokens.\r\n    /// @param token - ERC20 token address.\r\n    /// @param amount of ERC20 tokens to remove.\r\n    function transferAccidentallyLockedTokens(IERC20 token, uint256 amount) public onlyOwner noReentrant {\r\n        require(address(token) != address(0), \"Token address can not be zero\");\r\n        // This function can not access the official timelocked tokens; just other random ERC20 tokens that may have been accidently sent here\r\n        require(token != _token, \"Token address can not be ERC20 address which was passed into the constructor\");\r\n        // Transfer the amount of the specified ERC20 tokens, to the owner of this contract\r\n        token.safeTransfer(msg.sender, amount);\r\n    }\r\n}\r\n"
    },
    "contracts/TokenVesting.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport { Address } from \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport { ReentrancyGuard } from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport { SafeMath } from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\n\r\n/**\r\n * @title Token vesting Contract\r\n */\r\ncontract TokenVesting is Ownable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    struct VestingSchedule {\r\n        bool initialized;\r\n        // beneficiary of tokens after they are released\r\n        address beneficiary;\r\n        // cliff period in seconds\r\n        uint256 cliff;\r\n        // start time of the vesting period\r\n        uint256 start;\r\n        // duration of the vesting period in seconds\r\n        uint256 duration;\r\n        // duration of a slice period for the vesting in seconds\r\n        uint256 slicePeriodSeconds;\r\n        // whether or not the vesting is revocable\r\n        bool revocable;\r\n        // total amount of tokens to be released at the end of the vesting\r\n        uint256 amountTotal;\r\n        // amount of tokens released\r\n        uint256 released;\r\n        // whether or not the vesting has been revoked\r\n        bool revoked;\r\n    }\r\n\r\n    // address of the MEI token\r\n    IERC20 private immutable _token;\r\n\r\n    bytes32[] private vestingSchedulesIds;\r\n    mapping(bytes32 => VestingSchedule) private vestingSchedules;\r\n    uint256 private vestingSchedulesTotalAmount;\r\n    mapping(address => uint256) private holdersVestingCount;\r\n\r\n    event Released(uint256 amount);\r\n    event Revoked();\r\n\r\n    /**\r\n     * @dev Reverts if no vesting schedule matches the passed identifier.\r\n     */\r\n    modifier onlyIfVestingScheduleExists(bytes32 vestingScheduleId) {\r\n        require(vestingSchedules[vestingScheduleId].initialized == true);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if the vesting schedule does not exist or has been revoked.\r\n     */\r\n    modifier onlyIfVestingScheduleNotRevoked(bytes32 vestingScheduleId) {\r\n        require(vestingSchedules[vestingScheduleId].initialized == true);\r\n        require(vestingSchedules[vestingScheduleId].revoked == false);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Creates a vesting contract.\r\n     * @param token_ address of the ERC20 token contract\r\n     */\r\n    constructor(address token_) {\r\n        require(token_ != address(0x0));\r\n        _token = IERC20(token_);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    fallback() external payable {}\r\n\r\n    /**\r\n     * @dev Returns the number of vesting schedules associated to a beneficiary.\r\n     * @return the number of vesting schedules\r\n     */\r\n    function getVestingSchedulesCountByBeneficiary(address _beneficiary) external view returns (uint256) {\r\n        return holdersVestingCount[_beneficiary];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the vesting schedule id at the given index.\r\n     * @return the vesting id\r\n     */\r\n    function getVestingIdAtIndex(uint256 index) external view returns (bytes32) {\r\n        require(index < getVestingSchedulesCount(), \"TokenVesting: index out of bounds\");\r\n        return vestingSchedulesIds[index];\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the vesting schedule information for a given holder and index.\r\n     * @return the vesting schedule structure information\r\n     */\r\n    function getVestingScheduleByAddressAndIndex(address holder, uint256 index)\r\n        external\r\n        view\r\n        returns (VestingSchedule memory)\r\n    {\r\n        return getVestingSchedule(computeVestingScheduleIdForAddressAndIndex(holder, index));\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the total amount of vesting schedules.\r\n     * @return the total amount of vesting schedules\r\n     */\r\n    function getVestingSchedulesTotalAmount() external view returns (uint256) {\r\n        return vestingSchedulesTotalAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the ERC20 token managed by the vesting contract.\r\n     */\r\n    function getToken() external view returns (address) {\r\n        return address(_token);\r\n    }\r\n\r\n    /**\r\n     * @notice Creates a new vesting schedule for a beneficiary.\r\n     * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\r\n     * @param _start start time of the vesting period\r\n     * @param _cliff duration in seconds of the cliff in which tokens will begin to vest\r\n     * @param _duration duration in seconds of the period in which the tokens will vest\r\n     * @param _slicePeriodSeconds duration of a slice period for the vesting in seconds\r\n     * @param _revocable whether the vesting is revocable or not\r\n     * @param _amount total amount of tokens to be released at the end of the vesting\r\n     */\r\n    function createVestingSchedule(\r\n        address _beneficiary,\r\n        uint256 _start,\r\n        uint256 _cliff,\r\n        uint256 _duration,\r\n        uint256 _slicePeriodSeconds,\r\n        bool _revocable,\r\n        uint256 _amount\r\n    ) public onlyOwner {\r\n        require(\r\n            this.getWithdrawableAmount() >= _amount,\r\n            \"TokenVesting: cannot create vesting schedule because not sufficient tokens\"\r\n        );\r\n        require(_duration > 0, \"TokenVesting: duration must be > 0\");\r\n        require(_amount > 0, \"TokenVesting: amount must be > 0\");\r\n        require(_slicePeriodSeconds >= 1, \"TokenVesting: slicePeriodSeconds must be >= 1\");\r\n        bytes32 vestingScheduleId = this.computeNextVestingScheduleIdForHolder(_beneficiary);\r\n        uint256 cliff = _start.add(_cliff);\r\n        vestingSchedules[vestingScheduleId] = VestingSchedule(\r\n            true,\r\n            _beneficiary,\r\n            cliff,\r\n            _start,\r\n            _duration,\r\n            _slicePeriodSeconds,\r\n            _revocable,\r\n            _amount,\r\n            0,\r\n            false\r\n        );\r\n        vestingSchedulesTotalAmount = vestingSchedulesTotalAmount.add(_amount);\r\n        vestingSchedulesIds.push(vestingScheduleId);\r\n        uint256 currentVestingCount = holdersVestingCount[_beneficiary];\r\n        holdersVestingCount[_beneficiary] = currentVestingCount.add(1);\r\n    }\r\n\r\n    /**\r\n     * @notice Revokes the vesting schedule for given identifier.\r\n     * @param vestingScheduleId the vesting schedule identifier\r\n     */\r\n    function revoke(bytes32 vestingScheduleId) public onlyOwner onlyIfVestingScheduleNotRevoked(vestingScheduleId) {\r\n        VestingSchedule storage vestingSchedule = vestingSchedules[vestingScheduleId];\r\n        require(vestingSchedule.revocable == true, \"TokenVesting: vesting is not revocable\");\r\n        uint256 vestedAmount = _computeReleasableAmount(vestingSchedule);\r\n        if (vestedAmount > 0) {\r\n            release(vestingScheduleId, vestedAmount);\r\n        }\r\n        uint256 unreleased = vestingSchedule.amountTotal.sub(vestingSchedule.released);\r\n        vestingSchedulesTotalAmount = vestingSchedulesTotalAmount.sub(unreleased);\r\n        vestingSchedule.revoked = true;\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraw the specified amount if possible.\r\n     * @param amount the amount to withdraw\r\n     */\r\n    function withdraw(uint256 amount) public nonReentrant onlyOwner {\r\n        require(this.getWithdrawableAmount() >= amount, \"TokenVesting: not enough withdrawable funds\");\r\n        _token.safeTransfer(owner(), amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Release vested amount of tokens.\r\n     * @param vestingScheduleId the vesting schedule identifier\r\n     * @param amount the amount to release\r\n     */\r\n    function release(bytes32 vestingScheduleId, uint256 amount)\r\n        public\r\n        nonReentrant\r\n        onlyIfVestingScheduleNotRevoked(vestingScheduleId)\r\n    {\r\n        VestingSchedule storage vestingSchedule = vestingSchedules[vestingScheduleId];\r\n        bool isBeneficiary = msg.sender == vestingSchedule.beneficiary;\r\n        bool isOwner = msg.sender == owner();\r\n        require(isBeneficiary || isOwner, \"TokenVesting: only beneficiary and owner can release vested tokens\");\r\n        uint256 vestedAmount = _computeReleasableAmount(vestingSchedule);\r\n        require(vestedAmount >= amount, \"TokenVesting: cannot release tokens, not enough vested tokens\");\r\n        vestingSchedule.released = vestingSchedule.released.add(amount);\r\n        address payable beneficiaryPayable = payable(vestingSchedule.beneficiary);\r\n        vestingSchedulesTotalAmount = vestingSchedulesTotalAmount.sub(amount);\r\n        _token.safeTransfer(beneficiaryPayable, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of vesting schedules managed by this contract.\r\n     * @return the number of vesting schedules\r\n     */\r\n    function getVestingSchedulesCount() public view returns (uint256) {\r\n        return vestingSchedulesIds.length;\r\n    }\r\n\r\n    /**\r\n     * @notice Computes the vested amount of tokens for the given vesting schedule identifier.\r\n     * @return the vested amount\r\n     */\r\n    function computeReleasableAmount(bytes32 vestingScheduleId)\r\n        public\r\n        view\r\n        onlyIfVestingScheduleNotRevoked(vestingScheduleId)\r\n        returns (uint256)\r\n    {\r\n        VestingSchedule storage vestingSchedule = vestingSchedules[vestingScheduleId];\r\n        return _computeReleasableAmount(vestingSchedule);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the vesting schedule information for a given identifier.\r\n     * @return the vesting schedule structure information\r\n     */\r\n    function getVestingSchedule(bytes32 vestingScheduleId) public view returns (VestingSchedule memory) {\r\n        return vestingSchedules[vestingScheduleId];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens that can be withdrawn by the owner.\r\n     * @return the amount of tokens\r\n     */\r\n    function getWithdrawableAmount() public view returns (uint256) {\r\n        return _token.balanceOf(address(this)).sub(vestingSchedulesTotalAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Computes the next vesting schedule identifier for a given holder address.\r\n     */\r\n    function computeNextVestingScheduleIdForHolder(address holder) public view returns (bytes32) {\r\n        return computeVestingScheduleIdForAddressAndIndex(holder, holdersVestingCount[holder]);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the last vesting schedule for a given holder address.\r\n     */\r\n    function getLastVestingScheduleForHolder(address holder) public view returns (VestingSchedule memory) {\r\n        return vestingSchedules[computeVestingScheduleIdForAddressAndIndex(holder, holdersVestingCount[holder] - 1)];\r\n    }\r\n\r\n    /**\r\n     * @dev Computes the vesting schedule identifier for an address and an index.\r\n     */\r\n    function computeVestingScheduleIdForAddressAndIndex(address holder, uint256 index) public pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(holder, index));\r\n    }\r\n\r\n    /**\r\n     * @dev Computes the releasable amount of tokens for a vesting schedule.\r\n     * @return the amount of releasable tokens\r\n     */\r\n    function _computeReleasableAmount(VestingSchedule memory vestingSchedule) internal view returns (uint256) {\r\n        uint256 currentTime = getCurrentTime();\r\n        if ((currentTime < vestingSchedule.cliff) || vestingSchedule.revoked == true) {\r\n            return 0;\r\n        } else if (currentTime >= vestingSchedule.start.add(vestingSchedule.duration)) {\r\n            return vestingSchedule.amountTotal.sub(vestingSchedule.released);\r\n        } else {\r\n            uint256 timeFromStart = currentTime.sub(vestingSchedule.start);\r\n            uint256 secondsPerSlice = vestingSchedule.slicePeriodSeconds;\r\n            uint256 vestedSlicePeriods = timeFromStart.div(secondsPerSlice);\r\n            uint256 vestedSeconds = vestedSlicePeriods.mul(secondsPerSlice);\r\n            uint256 vestedAmount = vestingSchedule.amountTotal.mul(vestedSeconds).div(vestingSchedule.duration);\r\n            vestedAmount = vestedAmount.sub(vestingSchedule.released);\r\n            return vestedAmount;\r\n        }\r\n    }\r\n\r\n    function getCurrentTime() internal view virtual returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n}\r\n"
    },
    "contracts/Token.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\nimport { ERC20 } from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\ncontract Token is ERC20 {\r\n    constructor(\r\n        string memory name_,\r\n        string memory symbol_,\r\n        uint256 totalSupply_\r\n    ) ERC20(name_, symbol_) {\r\n        _mint(msg.sender, totalSupply_);\r\n    }\r\n}\r\n"
    },
    "contracts/MockTokenVesting.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\nimport \"./TokenVesting.sol\";\r\n\r\n/**\r\n * @title MockTokenVesting\r\n * WARNING: use only for testing and debugging purpose\r\n */\r\ncontract MockTokenVesting is TokenVesting {\r\n    uint256 mockTime = 0;\r\n\r\n    constructor(address token_) TokenVesting(token_) {}\r\n\r\n    function setCurrentTime(uint256 _time) external {\r\n        mockTime = _time;\r\n    }\r\n\r\n    function getCurrentTime() internal view virtual override returns (uint256) {\r\n        return mockTime;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "metadata": {
      "bytecodeHash": "none",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 800
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": ["ast"]
      }
    }
  }
}
