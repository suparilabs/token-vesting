/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  Overrides,
  BigNumberish,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Token, TokenInterface } from "../Token";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "totalSupply_",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001b1f38038062001b1f833981810160405281019062000037919062000532565b8282816003908051906020019062000051929190620002aa565b5080600490805190602001906200006a929190620002aa565b505050620000a17fd62c15d2c2e723c6fb7220a8d20533dc9083cacb431958b9132ca6383ef49c9760001b6200012460201b60201c565b620000d57fe7670046cf73e500eb0e2bc404fbe9aa827221eefa09d5973796785ffda09b0460001b6200012460201b60201c565b620001097fcb6a1f6dadfb3dcd5131778b8b3037416d2cc91d551080d3fe9a8a6a0bf7cb7460001b6200012460201b60201c565b6200011b33826200012760201b60201c565b5050506200076e565b50565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156200019a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000191906200062d565b60405180910390fd5b620001ae60008383620002a060201b60201c565b8060026000828254620001c291906200067e565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546200021991906200067e565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051620002809190620006ec565b60405180910390a36200029c60008383620002a560201b60201c565b5050565b505050565b505050565b828054620002b89062000738565b90600052602060002090601f016020900481019282620002dc576000855562000328565b82601f10620002f757805160ff191683800117855562000328565b8280016001018555821562000328579182015b82811115620003275782518255916020019190600101906200030a565b5b5090506200033791906200033b565b5090565b5b80821115620003565760008160009055506001016200033c565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620003c38262000378565b810181811067ffffffffffffffff82111715620003e557620003e462000389565b5b80604052505050565b6000620003fa6200035a565b9050620004088282620003b8565b919050565b600067ffffffffffffffff8211156200042b576200042a62000389565b5b620004368262000378565b9050602081019050919050565b60005b838110156200046357808201518184015260208101905062000446565b8381111562000473576000848401525b50505050565b6000620004906200048a846200040d565b620003ee565b905082815260208101848484011115620004af57620004ae62000373565b5b620004bc84828562000443565b509392505050565b600082601f830112620004dc57620004db6200036e565b5b8151620004ee84826020860162000479565b91505092915050565b6000819050919050565b6200050c81620004f7565b81146200051857600080fd5b50565b6000815190506200052c8162000501565b92915050565b6000806000606084860312156200054e576200054d62000364565b5b600084015167ffffffffffffffff8111156200056f576200056e62000369565b5b6200057d86828701620004c4565b935050602084015167ffffffffffffffff811115620005a157620005a062000369565b5b620005af86828701620004c4565b9250506040620005c2868287016200051b565b9150509250925092565b600082825260208201905092915050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b600062000615601f83620005cc565b91506200062282620005dd565b602082019050919050565b60006020820190508181036000830152620006488162000606565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006200068b82620004f7565b91506200069883620004f7565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115620006d057620006cf6200064f565b5b828201905092915050565b620006e681620004f7565b82525050565b6000602082019050620007036000830184620006db565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200075157607f821691505b6020821081141562000768576200076762000709565b5b50919050565b6113a1806200077e6000396000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c80633950935111610081578063a457c2d71161005b578063a457c2d714610206578063a9059cbb14610236578063dd62ed3e14610266576100c9565b8063395093511461018857806370a08231146101b857806395d89b41146101e8576100c9565b806318160ddd116100b257806318160ddd1461011c57806323b872dd1461013a578063313ce5671461016a576100c9565b806306fdde03146100ce578063095ea7b3146100ec575b600080fd5b6100d6610296565b6040516100e39190610c5e565b60405180910390f35b61010660048036038101906101019190610d19565b610328565b6040516101139190610d74565b60405180910390f35b610124610346565b6040516101319190610d9e565b60405180910390f35b610154600480360381019061014f9190610db9565b610350565b6040516101619190610d74565b60405180910390f35b610172610448565b60405161017f9190610e28565b60405180910390f35b6101a2600480360381019061019d9190610d19565b610451565b6040516101af9190610d74565b60405180910390f35b6101d260048036038101906101cd9190610e43565b6104fd565b6040516101df9190610d9e565b60405180910390f35b6101f0610545565b6040516101fd9190610c5e565b60405180910390f35b610220600480360381019061021b9190610d19565b6105d7565b60405161022d9190610d74565b60405180910390f35b610250600480360381019061024b9190610d19565b6106c2565b60405161025d9190610d74565b60405180910390f35b610280600480360381019061027b9190610e70565b6106e0565b60405161028d9190610d9e565b60405180910390f35b6060600380546102a590610edf565b80601f01602080910402602001604051908101604052809291908181526020018280546102d190610edf565b801561031e5780601f106102f35761010080835404028352916020019161031e565b820191906000526020600020905b81548152906001019060200180831161030157829003601f168201915b5050505050905090565b600061033c610335610767565b848461076f565b6001905092915050565b6000600254905090565b600061035d84848461093a565b6000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006103a8610767565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610428576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041f90610f83565b60405180910390fd5b61043c85610434610767565b85840361076f565b60019150509392505050565b60006012905090565b60006104f361045e610767565b84846001600061046c610767565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546104ee9190610fd2565b61076f565b6001905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606004805461055490610edf565b80601f016020809104026020016040519081016040528092919081815260200182805461058090610edf565b80156105cd5780601f106105a2576101008083540402835291602001916105cd565b820191906000526020600020905b8154815290600101906020018083116105b057829003601f168201915b5050505050905090565b600080600160006105e6610767565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050828110156106a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069a9061109a565b60405180910390fd5b6106b76106ae610767565b8585840361076f565b600191505092915050565b60006106d66106cf610767565b848461093a565b6001905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156107df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d69061112c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561084f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610846906111be565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161092d9190610d9e565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156109aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a190611250565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610a1a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a11906112e2565b60405180910390fd5b610a25838383610bbb565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610aab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aa290611374565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610b3e9190610fd2565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610ba29190610d9e565b60405180910390a3610bb5848484610bc0565b50505050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610bff578082015181840152602081019050610be4565b83811115610c0e576000848401525b50505050565b6000601f19601f8301169050919050565b6000610c3082610bc5565b610c3a8185610bd0565b9350610c4a818560208601610be1565b610c5381610c14565b840191505092915050565b60006020820190508181036000830152610c788184610c25565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610cb082610c85565b9050919050565b610cc081610ca5565b8114610ccb57600080fd5b50565b600081359050610cdd81610cb7565b92915050565b6000819050919050565b610cf681610ce3565b8114610d0157600080fd5b50565b600081359050610d1381610ced565b92915050565b60008060408385031215610d3057610d2f610c80565b5b6000610d3e85828601610cce565b9250506020610d4f85828601610d04565b9150509250929050565b60008115159050919050565b610d6e81610d59565b82525050565b6000602082019050610d896000830184610d65565b92915050565b610d9881610ce3565b82525050565b6000602082019050610db36000830184610d8f565b92915050565b600080600060608486031215610dd257610dd1610c80565b5b6000610de086828701610cce565b9350506020610df186828701610cce565b9250506040610e0286828701610d04565b9150509250925092565b600060ff82169050919050565b610e2281610e0c565b82525050565b6000602082019050610e3d6000830184610e19565b92915050565b600060208284031215610e5957610e58610c80565b5b6000610e6784828501610cce565b91505092915050565b60008060408385031215610e8757610e86610c80565b5b6000610e9585828601610cce565b9250506020610ea685828601610cce565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610ef757607f821691505b60208210811415610f0b57610f0a610eb0565b5b50919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206160008201527f6c6c6f77616e6365000000000000000000000000000000000000000000000000602082015250565b6000610f6d602883610bd0565b9150610f7882610f11565b604082019050919050565b60006020820190508181036000830152610f9c81610f60565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610fdd82610ce3565b9150610fe883610ce3565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561101d5761101c610fa3565b5b828201905092915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000611084602583610bd0565b915061108f82611028565b604082019050919050565b600060208201905081810360008301526110b381611077565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000611116602483610bd0565b9150611121826110ba565b604082019050919050565b6000602082019050818103600083015261114581611109565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b60006111a8602283610bd0565b91506111b38261114c565b604082019050919050565b600060208201905081810360008301526111d78161119b565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b600061123a602583610bd0565b9150611245826111de565b604082019050919050565b600060208201905081810360008301526112698161122d565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b60006112cc602383610bd0565b91506112d782611270565b604082019050919050565b600060208201905081810360008301526112fb816112bf565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b600061135e602683610bd0565b915061136982611302565b604082019050919050565b6000602082019050818103600083015261138d81611351565b905091905056fea164736f6c6343000809000a";

type TokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Token__factory extends ContractFactory {
  constructor(...args: TokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Token";
  }

  deploy(
    name_: string,
    symbol_: string,
    totalSupply_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Token> {
    return super.deploy(
      name_,
      symbol_,
      totalSupply_,
      overrides || {}
    ) as Promise<Token>;
  }
  getDeployTransaction(
    name_: string,
    symbol_: string,
    totalSupply_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      name_,
      symbol_,
      totalSupply_,
      overrides || {}
    );
  }
  attach(address: string): Token {
    return super.attach(address) as Token;
  }
  connect(signer: Signer): Token__factory {
    return super.connect(signer) as Token__factory;
  }
  static readonly contractName: "Token";
  public readonly contractName: "Token";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenInterface {
    return new utils.Interface(_abi) as TokenInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Token {
    return new Contract(address, _abi, signerOrProvider) as Token;
  }
}
