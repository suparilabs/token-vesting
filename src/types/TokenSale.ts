/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface TokenSaleInterface extends utils.Interface {
  contractName: "TokenSale";
  functions: {
    "BUSD()": FunctionFragment;
    "USDT()": FunctionFragment;
    "_PrivateTokenSaleContract()": FunctionFragment;
    "alice()": FunctionFragment;
    "aliceCoinsSold()": FunctionFragment;
    "busdPrice()": FunctionFragment;
    "buyTokens(uint256,bool)": FunctionFragment;
    "buyTokensUsingBUSD(uint256,uint256,bool)": FunctionFragment;
    "buyTokensUsingUSDT(uint256,uint256,bool)": FunctionFragment;
    "cliff()": FunctionFragment;
    "duration()": FunctionFragment;
    "endSale()": FunctionFragment;
    "exchangePriceBUSD()": FunctionFragment;
    "exchangePriceUSDT()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setCliff(uint256)": FunctionFragment;
    "setDuration(uint256)": FunctionFragment;
    "setExchangePriceBUSD(uint256)": FunctionFragment;
    "setExchangePriceUSDT(uint256)": FunctionFragment;
    "tokenContract()": FunctionFragment;
    "tokenPrice()": FunctionFragment;
    "tokensSold()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "usdtPrice()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "BUSD", values?: undefined): string;
  encodeFunctionData(functionFragment: "USDT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_PrivateTokenSaleContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "alice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "aliceCoinsSold",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "busdPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "buyTokens",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "buyTokensUsingBUSD",
    values: [BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "buyTokensUsingUSDT",
    values: [BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(functionFragment: "cliff", values?: undefined): string;
  encodeFunctionData(functionFragment: "duration", values?: undefined): string;
  encodeFunctionData(functionFragment: "endSale", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "exchangePriceBUSD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exchangePriceUSDT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCliff",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setExchangePriceBUSD",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setExchangePriceUSDT",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokensSold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "usdtPrice", values?: undefined): string;

  decodeFunctionResult(functionFragment: "BUSD", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "USDT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_PrivateTokenSaleContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "alice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "aliceCoinsSold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "busdPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyTokensUsingBUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyTokensUsingUSDT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cliff", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "duration", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endSale", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exchangePriceBUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangePriceUSDT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setCliff", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExchangePriceBUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExchangePriceUSDT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokensSold", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdtPrice", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "Sold(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Sold"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type SoldEvent = TypedEvent<
  [string, BigNumber],
  { buyer: string; amount: BigNumber }
>;

export type SoldEventFilter = TypedEventFilter<SoldEvent>;

export interface TokenSale extends BaseContract {
  contractName: "TokenSale";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TokenSaleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BUSD(overrides?: CallOverrides): Promise<[string]>;

    USDT(overrides?: CallOverrides): Promise<[string]>;

    _PrivateTokenSaleContract(overrides?: CallOverrides): Promise<[string]>;

    alice(overrides?: CallOverrides): Promise<[string]>;

    aliceCoinsSold(overrides?: CallOverrides): Promise<[BigNumber]>;

    busdPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    buyTokens(
      numberOfTokens: BigNumberish,
      _revocable: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyTokensUsingBUSD(
      _busdAmount: BigNumberish,
      numberOfTokens: BigNumberish,
      _revocable: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyTokensUsingUSDT(
      _usdtAmount: BigNumberish,
      numberOfTokens: BigNumberish,
      _revocable: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cliff(overrides?: CallOverrides): Promise<[BigNumber]>;

    duration(overrides?: CallOverrides): Promise<[BigNumber]>;

    endSale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exchangePriceBUSD(overrides?: CallOverrides): Promise<[BigNumber]>;

    exchangePriceUSDT(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCliff(
      _cliff: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDuration(
      _duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setExchangePriceBUSD(
      _busdPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setExchangePriceUSDT(
      _usdtPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenContract(overrides?: CallOverrides): Promise<[string]>;

    tokenPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokensSold(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    usdtPrice(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  BUSD(overrides?: CallOverrides): Promise<string>;

  USDT(overrides?: CallOverrides): Promise<string>;

  _PrivateTokenSaleContract(overrides?: CallOverrides): Promise<string>;

  alice(overrides?: CallOverrides): Promise<string>;

  aliceCoinsSold(overrides?: CallOverrides): Promise<BigNumber>;

  busdPrice(overrides?: CallOverrides): Promise<BigNumber>;

  buyTokens(
    numberOfTokens: BigNumberish,
    _revocable: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyTokensUsingBUSD(
    _busdAmount: BigNumberish,
    numberOfTokens: BigNumberish,
    _revocable: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyTokensUsingUSDT(
    _usdtAmount: BigNumberish,
    numberOfTokens: BigNumberish,
    _revocable: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cliff(overrides?: CallOverrides): Promise<BigNumber>;

  duration(overrides?: CallOverrides): Promise<BigNumber>;

  endSale(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exchangePriceBUSD(overrides?: CallOverrides): Promise<BigNumber>;

  exchangePriceUSDT(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCliff(
    _cliff: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDuration(
    _duration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setExchangePriceBUSD(
    _busdPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setExchangePriceUSDT(
    _usdtPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenContract(overrides?: CallOverrides): Promise<string>;

  tokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

  tokensSold(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  usdtPrice(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    BUSD(overrides?: CallOverrides): Promise<string>;

    USDT(overrides?: CallOverrides): Promise<string>;

    _PrivateTokenSaleContract(overrides?: CallOverrides): Promise<string>;

    alice(overrides?: CallOverrides): Promise<string>;

    aliceCoinsSold(overrides?: CallOverrides): Promise<BigNumber>;

    busdPrice(overrides?: CallOverrides): Promise<BigNumber>;

    buyTokens(
      numberOfTokens: BigNumberish,
      _revocable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    buyTokensUsingBUSD(
      _busdAmount: BigNumberish,
      numberOfTokens: BigNumberish,
      _revocable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    buyTokensUsingUSDT(
      _usdtAmount: BigNumberish,
      numberOfTokens: BigNumberish,
      _revocable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    cliff(overrides?: CallOverrides): Promise<BigNumber>;

    duration(overrides?: CallOverrides): Promise<BigNumber>;

    endSale(overrides?: CallOverrides): Promise<void>;

    exchangePriceBUSD(overrides?: CallOverrides): Promise<BigNumber>;

    exchangePriceUSDT(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setCliff(_cliff: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setDuration(
      _duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setExchangePriceBUSD(
      _busdPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setExchangePriceUSDT(
      _usdtPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenContract(overrides?: CallOverrides): Promise<string>;

    tokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

    tokensSold(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    usdtPrice(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Sold(address,uint256)"(buyer?: null, amount?: null): SoldEventFilter;
    Sold(buyer?: null, amount?: null): SoldEventFilter;
  };

  estimateGas: {
    BUSD(overrides?: CallOverrides): Promise<BigNumber>;

    USDT(overrides?: CallOverrides): Promise<BigNumber>;

    _PrivateTokenSaleContract(overrides?: CallOverrides): Promise<BigNumber>;

    alice(overrides?: CallOverrides): Promise<BigNumber>;

    aliceCoinsSold(overrides?: CallOverrides): Promise<BigNumber>;

    busdPrice(overrides?: CallOverrides): Promise<BigNumber>;

    buyTokens(
      numberOfTokens: BigNumberish,
      _revocable: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyTokensUsingBUSD(
      _busdAmount: BigNumberish,
      numberOfTokens: BigNumberish,
      _revocable: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyTokensUsingUSDT(
      _usdtAmount: BigNumberish,
      numberOfTokens: BigNumberish,
      _revocable: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cliff(overrides?: CallOverrides): Promise<BigNumber>;

    duration(overrides?: CallOverrides): Promise<BigNumber>;

    endSale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exchangePriceBUSD(overrides?: CallOverrides): Promise<BigNumber>;

    exchangePriceUSDT(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCliff(
      _cliff: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDuration(
      _duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setExchangePriceBUSD(
      _busdPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setExchangePriceUSDT(
      _usdtPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenContract(overrides?: CallOverrides): Promise<BigNumber>;

    tokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

    tokensSold(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    usdtPrice(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BUSD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    USDT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _PrivateTokenSaleContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    alice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    aliceCoinsSold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    busdPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyTokens(
      numberOfTokens: BigNumberish,
      _revocable: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyTokensUsingBUSD(
      _busdAmount: BigNumberish,
      numberOfTokens: BigNumberish,
      _revocable: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyTokensUsingUSDT(
      _usdtAmount: BigNumberish,
      numberOfTokens: BigNumberish,
      _revocable: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cliff(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    duration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    endSale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exchangePriceBUSD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exchangePriceUSDT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCliff(
      _cliff: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDuration(
      _duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setExchangePriceBUSD(
      _busdPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setExchangePriceUSDT(
      _usdtPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokensSold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    usdtPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
