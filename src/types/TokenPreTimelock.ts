/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface TokenPreTimelockInterface extends utils.Interface {
  contractName: "TokenPreTimelock";
  functions: {
    "allIncomingDepositsFinalised()": FunctionFragment;
    "alreadyWithdrawn(address)": FunctionFragment;
    "balances(address)": FunctionFragment;
    "bulkDepositTokens(address[],uint256[])": FunctionFragment;
    "depositTokens(address,uint256)": FunctionFragment;
    "getCurrentTime()": FunctionFragment;
    "getToken()": FunctionFragment;
    "initialTimestamp()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setTimestamp(uint256)": FunctionFragment;
    "timePeriod()": FunctionFragment;
    "timestampSet()": FunctionFragment;
    "transferAccidentallyLockedTokens(address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferTimeLockedTokensAfterTimePeriod(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allIncomingDepositsFinalised",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "alreadyWithdrawn",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "balances", values: [string]): string;
  encodeFunctionData(
    functionFragment: "bulkDepositTokens",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "depositTokens",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setTimestamp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "timePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timestampSet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferAccidentallyLockedTokens",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferTimeLockedTokensAfterTimePeriod",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "allIncomingDepositsFinalised",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "alreadyWithdrawn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bulkDepositTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "timePeriod", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "timestampSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferAccidentallyLockedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferTimeLockedTokensAfterTimePeriod",
    data: BytesLike
  ): Result;

  events: {
    "AllocationPerformed(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "TokensDeposited(address,uint256)": EventFragment;
    "TokensUnlocked(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AllocationPerformed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensUnlocked"): EventFragment;
}

export type AllocationPerformedEvent = TypedEvent<
  [string, BigNumber],
  { recipient: string; amount: BigNumber }
>;

export type AllocationPerformedEventFilter =
  TypedEventFilter<AllocationPerformedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type TokensDepositedEvent = TypedEvent<
  [string, BigNumber],
  { from: string; amount: BigNumber }
>;

export type TokensDepositedEventFilter = TypedEventFilter<TokensDepositedEvent>;

export type TokensUnlockedEvent = TypedEvent<
  [string, BigNumber],
  { recipient: string; amount: BigNumber }
>;

export type TokensUnlockedEventFilter = TypedEventFilter<TokensUnlockedEvent>;

export interface TokenPreTimelock extends BaseContract {
  contractName: "TokenPreTimelock";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TokenPreTimelockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allIncomingDepositsFinalised(overrides?: CallOverrides): Promise<[boolean]>;

    alreadyWithdrawn(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balances(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    bulkDepositTokens(
      recipients: string[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositTokens(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCurrentTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    getToken(overrides?: CallOverrides): Promise<[string]>;

    initialTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTimestamp(
      _timePeriodInSeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    timePeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    timestampSet(overrides?: CallOverrides): Promise<[boolean]>;

    transferAccidentallyLockedTokens(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferTimeLockedTokensAfterTimePeriod(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  allIncomingDepositsFinalised(overrides?: CallOverrides): Promise<boolean>;

  alreadyWithdrawn(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  bulkDepositTokens(
    recipients: string[],
    amounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositTokens(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

  getToken(overrides?: CallOverrides): Promise<string>;

  initialTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTimestamp(
    _timePeriodInSeconds: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  timePeriod(overrides?: CallOverrides): Promise<BigNumber>;

  timestampSet(overrides?: CallOverrides): Promise<boolean>;

  transferAccidentallyLockedTokens(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferTimeLockedTokensAfterTimePeriod(
    token: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allIncomingDepositsFinalised(overrides?: CallOverrides): Promise<boolean>;

    alreadyWithdrawn(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    bulkDepositTokens(
      recipients: string[],
      amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    depositTokens(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

    getToken(overrides?: CallOverrides): Promise<string>;

    initialTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setTimestamp(
      _timePeriodInSeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    timePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    timestampSet(overrides?: CallOverrides): Promise<boolean>;

    transferAccidentallyLockedTokens(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferTimeLockedTokensAfterTimePeriod(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AllocationPerformed(address,uint256)"(
      recipient?: null,
      amount?: null
    ): AllocationPerformedEventFilter;
    AllocationPerformed(
      recipient?: null,
      amount?: null
    ): AllocationPerformedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "TokensDeposited(address,uint256)"(
      from?: null,
      amount?: null
    ): TokensDepositedEventFilter;
    TokensDeposited(from?: null, amount?: null): TokensDepositedEventFilter;

    "TokensUnlocked(address,uint256)"(
      recipient?: null,
      amount?: null
    ): TokensUnlockedEventFilter;
    TokensUnlocked(recipient?: null, amount?: null): TokensUnlockedEventFilter;
  };

  estimateGas: {
    allIncomingDepositsFinalised(overrides?: CallOverrides): Promise<BigNumber>;

    alreadyWithdrawn(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    bulkDepositTokens(
      recipients: string[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositTokens(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

    getToken(overrides?: CallOverrides): Promise<BigNumber>;

    initialTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTimestamp(
      _timePeriodInSeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    timePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    timestampSet(overrides?: CallOverrides): Promise<BigNumber>;

    transferAccidentallyLockedTokens(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferTimeLockedTokensAfterTimePeriod(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allIncomingDepositsFinalised(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    alreadyWithdrawn(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bulkDepositTokens(
      recipients: string[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositTokens(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCurrentTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTimestamp(
      _timePeriodInSeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    timePeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timestampSet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferAccidentallyLockedTokens(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferTimeLockedTokensAfterTimePeriod(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
